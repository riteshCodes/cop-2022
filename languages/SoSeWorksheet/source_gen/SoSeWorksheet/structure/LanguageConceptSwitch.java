package SoSeWorksheet.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BoolAssign = 0;
  public static final int BoolBinaryExpression = 1;
  public static final int BoolExpression = 2;
  public static final int BoolLiteral = 3;
  public static final int BoolObjectVar = 4;
  public static final int BoolParameter = 5;
  public static final int BoolRef = 6;
  public static final int BoolVar = 7;
  public static final int ClassDefinition = 8;
  public static final int DivsionExpression = 9;
  public static final int EmptyLine = 10;
  public static final int EqualsAndNotEqualsBinaryExpression = 11;
  public static final int EqualsExpression = 12;
  public static final int Expression = 13;
  public static final int ForLoop = 14;
  public static final int Function = 15;
  public static final int FunctionCall = 16;
  public static final int GreaterEqualsExpression = 17;
  public static final int GreaterExpression = 18;
  public static final int IBoolVar = 19;
  public static final int IClassStatement = 20;
  public static final int IIntVar = 21;
  public static final int IParam = 22;
  public static final int IStatement = 23;
  public static final int IStatementContainer = 24;
  public static final int IVariable = 25;
  public static final int If = 26;
  public static final int IntAssign = 27;
  public static final int IntBinaryExpression = 28;
  public static final int IntExpression = 29;
  public static final int IntLiteral = 30;
  public static final int IntObjectVar = 31;
  public static final int IntParameter = 32;
  public static final int IntRef = 33;
  public static final int IntVar = 34;
  public static final int Less = 35;
  public static final int LessEqualsExpression = 36;
  public static final int MinusExpression = 37;
  public static final int MultiplicatonExpression = 38;
  public static final int NotEqualsExpression = 39;
  public static final int NotEqualsLikeBinaryExpression = 40;
  public static final int Object = 41;
  public static final int PlusExpression = 42;
  public static final int ReturnStatement = 43;
  public static final int VarType = 44;
  public static final int WhileLoop = 45;
  public static final int Worksheet = 46;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L);
    builder.put(0x2f8fefb7a70b9dd1L, BoolAssign);
    builder.put(0x2c0acf2a3df941f2L, BoolBinaryExpression);
    builder.put(0x2c0acf2a3df941f3L, BoolExpression);
    builder.put(0x2c0acf2a3df941f7L, BoolLiteral);
    builder.put(0x6a561a266a2aff52L, BoolObjectVar);
    builder.put(0x6a561a266a1c17a5L, BoolParameter);
    builder.put(0x1b095d6932615899L, BoolRef);
    builder.put(0x72373ee575935b00L, BoolVar);
    builder.put(0x2c0acf2a3dfcab54L, ClassDefinition);
    builder.put(0x2c0acf2a3df58fe4L, DivsionExpression);
    builder.put(0x1ee4a93c3ed81300L, EmptyLine);
    builder.put(0x1feb01eb40858686L, EqualsAndNotEqualsBinaryExpression);
    builder.put(0x2c0acf2a3df941f6L, EqualsExpression);
    builder.put(0x2c0acf2a3dfa738cL, Expression);
    builder.put(0x6094fec7f39a8207L, ForLoop);
    builder.put(0x2c0acf2a3dfcac2aL, Function);
    builder.put(0x6ba37e7ec88b26c7L, FunctionCall);
    builder.put(0x2c0acf2a3df94233L, GreaterEqualsExpression);
    builder.put(0x2c0acf2a3df94234L, GreaterExpression);
    builder.put(0x6a561a266a196e46L, IBoolVar);
    builder.put(0x73f03f52b8cdd8eeL, IClassStatement);
    builder.put(0x6a561a266a16efc6L, IIntVar);
    builder.put(0x1d9591cece35380dL, IParam);
    builder.put(0x72373ee5759461d5L, IStatement);
    builder.put(0x152e385bedc6a8a6L, IStatementContainer);
    builder.put(0x6568c22ac03bc556L, IVariable);
    builder.put(0x3ef433c29e1b0fceL, If);
    builder.put(0x1b095d6932635c9fL, IntAssign);
    builder.put(0x2c0acf2a3df42a4dL, IntBinaryExpression);
    builder.put(0x2c0acf2a3df7616bL, IntExpression);
    builder.put(0x1ee4a93c3ec90fd4L, IntLiteral);
    builder.put(0x6a561a266a22ddcaL, IntObjectVar);
    builder.put(0x48465f3c2061ce21L, IntParameter);
    builder.put(0x1b095d6932615883L, IntRef);
    builder.put(0x72373ee575935b01L, IntVar);
    builder.put(0x2c0acf2a3df94232L, Less);
    builder.put(0x2c0acf2a3df94231L, LessEqualsExpression);
    builder.put(0x2c0acf2a3df512abL, MinusExpression);
    builder.put(0x2c0acf2a3df58fc9L, MultiplicatonExpression);
    builder.put(0x1feb01eb40800eccL, NotEqualsExpression);
    builder.put(0x2c0acf2a3df94230L, NotEqualsLikeBinaryExpression);
    builder.put(0x36a259e162ffdcb3L, Object);
    builder.put(0x2c0acf2a3df42b78L, PlusExpression);
    builder.put(0x93451e7fe8a0209L, ReturnStatement);
    builder.put(0xf3d911aafd3cea8L, VarType);
    builder.put(0x6094fec7f39bb7bfL, WhileLoop);
    builder.put(0x72373ee5759225b2L, Worksheet);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
