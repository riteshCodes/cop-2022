package SoSeWorksheet.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BoolVar;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_IVarContent;
  private ConceptPresentation props_IntLiteral;
  private ConceptPresentation props_IntVar;
  private ConceptPresentation props_LeftVar;
  private ConceptPresentation props_PlusExpression;
  private ConceptPresentation props_RightVar;
  private ConceptPresentation props_TwoValues;
  private ConceptPresentation props_TwoVars;
  private ConceptPresentation props_VariableDefine;
  private ConceptPresentation props_VariableRef;
  private ConceptPresentation props_Worksheet;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BoolVar:
        if (props_BoolVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BoolVar = cpb.create();
        }
        return props_BoolVar;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLine");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.IVarContent:
        if (props_IVarContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVarContent = cpb.create();
        }
        return props_IVarContent;
      case LanguageConceptSwitch.IntLiteral:
        if (props_IntLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntLiteral");
          props_IntLiteral = cpb.create();
        }
        return props_IntLiteral;
      case LanguageConceptSwitch.IntVar:
        if (props_IntVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntVar = cpb.create();
        }
        return props_IntVar;
      case LanguageConceptSwitch.LeftVar:
        if (props_LeftVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_LeftVar = cpb.create();
        }
        return props_LeftVar;
      case LanguageConceptSwitch.PlusExpression:
        if (props_PlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PlusExpression = cpb.create();
        }
        return props_PlusExpression;
      case LanguageConceptSwitch.RightVar:
        if (props_RightVar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_RightVar = cpb.create();
        }
        return props_RightVar;
      case LanguageConceptSwitch.TwoValues:
        if (props_TwoValues == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TwoValues");
          props_TwoValues = cpb.create();
        }
        return props_TwoValues;
      case LanguageConceptSwitch.TwoVars:
        if (props_TwoVars == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TwoVars");
          props_TwoVars = cpb.create();
        }
        return props_TwoVars;
      case LanguageConceptSwitch.VariableDefine:
        if (props_VariableDefine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableDefine = cpb.create();
        }
        return props_VariableDefine;
      case LanguageConceptSwitch.VariableRef:
        if (props_VariableRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ref");
          props_VariableRef = cpb.create();
        }
        return props_VariableRef;
      case LanguageConceptSwitch.Worksheet:
        if (props_Worksheet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the root of the language");
          cpb.presentationByName();
          props_Worksheet = cpb.create();
        }
        return props_Worksheet;
    }
    return null;
  }
}
