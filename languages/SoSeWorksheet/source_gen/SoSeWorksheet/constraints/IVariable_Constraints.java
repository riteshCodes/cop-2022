package SoSeWorksheet.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class IVariable_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(IVariable_Constraints.class);
  public IVariable_Constraints() {
    super(CONCEPTS.IVariable$Ud);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    for (SNode n : ListSequence.fromList(SNodeOperations.getChildren(parentNode))) {
      if (SNodeOperations.isInstanceOf(n, CONCEPTS.IVariable$Ud) && n != node) {
        if (SPropertyOperations.getString(SNodeOperations.as(n, CONCEPTS.IVariable$Ud), PROPS.name$MnvL).equals(SPropertyOperations.getString(node, PROPS.name$MnvL))) {
          LoggingRuntime.logMsgView(Level.ERROR, "in if if case", IVariable_Constraints.class, null, null);
          return false;
        }
        LoggingRuntime.logMsgView(Level.ERROR, SPropertyOperations.getString(node, PROPS.name$MnvL) + " " + SPropertyOperations.getString(SNodeOperations.as(n, CONCEPTS.IVariable$Ud), PROPS.name$MnvL) + " " + String.valueOf(SPropertyOperations.getString(SNodeOperations.as(n, CONCEPTS.IVariable$Ud), PROPS.name$MnvL).equals(SPropertyOperations.getString(node, PROPS.name$MnvL))), IVariable_Constraints.class, null, null);
      }
    }
    return true;
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:8b620ec9-cde6-4101-a22e-675a8f690f7a(SoSeWorksheet.constraints)", "2678177170341743012");

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IVariable$Ud = MetaAdapterFactory.getInterfaceConcept(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x6568c22ac03bc556L, "SoSeWorksheet.structure.IVariable");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
