package SoSeWorksheet.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_FunctionCall_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_FunctionCall_NonTypesystemRule() {
  }
  public void applyRule(final SNode functionCall, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getChildren(functionCall, LINKS.paramsBool$Nj2R).size() + SLinkOperations.getChildren(functionCall, LINKS.paramsInt$iD8l).size() != SLinkOperations.getChildren(SLinkOperations.getTarget(functionCall, LINKS.fun$9YqW), LINKS.params$Eaxt).size()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(functionCall, "The method call must have " + SLinkOperations.getChildren(SLinkOperations.getTarget(functionCall, LINKS.fun$9YqW), LINKS.params$Eaxt).size() + " parameters.", "r:13d48956-1e1f-4a48-98b2-288fa55ffd59(SoSeWorksheet.typesystem)", "7662340568307492459", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.FunctionCall$Vk;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink fun$9YqW = MetaAdapterFactory.getReferenceLink(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x6ba37e7ec88b26c7L, 0x6ba37e7ec88b26c8L, "fun");
    /*package*/ static final SContainmentLink params$Eaxt = MetaAdapterFactory.getContainmentLink(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x2c0acf2a3dfcac2aL, 0x48465f3c20636887L, "params");
    /*package*/ static final SContainmentLink paramsBool$Nj2R = MetaAdapterFactory.getContainmentLink(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x6ba37e7ec88b26c7L, 0x32b18d4ac0c156a9L, "paramsBool");
    /*package*/ static final SContainmentLink paramsInt$iD8l = MetaAdapterFactory.getContainmentLink(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x6ba37e7ec88b26c7L, 0x32b18d4ac0b516e1L, "paramsInt");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FunctionCall$Vk = MetaAdapterFactory.getConcept(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x6ba37e7ec88b26c7L, "SoSeWorksheet.structure.FunctionCall");
  }
}
