package SoSeWorksheet.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BoolVar_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new IntLiteral_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new IntVar_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new LeftVar_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new RightVar_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new TwoValues_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new TwoVars_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new VariableRef_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Worksheet_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x72373ee575935b00L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x1ee4a93c3ed81300L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x1ee4a93c3ec90fd4L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x72373ee575935b01L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x1ee4a93c3ecc31c5L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x1ee4a93c3ed24fe0L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x73aac863fbaf8325L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x73aac863fbaf20c3L), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x72373ee575935a3fL), MetaIdFactory.conceptId(0xc0ccb3a7555a492dL, 0x87ab866148bc2243L, 0x72373ee5759225b2L)).seal();
}
